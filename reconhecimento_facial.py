# -*- coding: utf-8 -*-
"""reconhecimento-facial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CKHDws7WXbsBnr1EmdC-XLBSPFB8BQOW

Dependências
"""

import os
import cv2
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import numpy as np

"""Classe Person, representando as imagens"""

class Person:
  def __init__(self, id, label, face):
    self.id = id
    self.label = label
    self.face = face

"""Leitura das imagens, conversões e ordenação com base no Id"""

folder = 'ORL'
archives = os.listdir(folder)

assert len(archives) == 41 * 10, f'Wrong size of archives, should be {41 * 10}, but actually is {len(archives)}'

persons = []

for archive in archives:
    split = archive.split("_")
    id = int(split[0])
    label = int(split[1].replace('.jpg',''))
    face = cv2.imread(os.path.join(folder, archive))    
    face = cv2.cvtColor(face, cv2.COLOR_BGR2GRAY)
    face = cv2.resize(face, (50, 50))
    persons.append(Person(id, label, face))

persons.sort(key=lambda person: person.id)

"""Separação em lista de treino e teste, usando holdout de 70/30"""

train_persons = list()
test_persons = list()

for i in range(0, len(persons), 10):
    person_imgs = persons[i:i + 10]
    train_person, test_person = train_test_split(person_imgs, train_size = 0.7, test_size = 0.3)

    train_persons += train_person
    test_persons += test_person

"""Treinamento do modelo configurando número de componentes principais e teste de acurácia através da predição das faces"""

start_number_of_components = 10
max_number_of_components = 10

train_persons_faces = [train_person.face for train_person in train_persons]
train_persons_labels = [train_person.label for train_person in train_persons]
test_persons_faces = [test_person.face for test_person in test_persons]
test_persons_labels = [test_person.label for test_person in test_persons]

for number_of_components in range(start_number_of_components, start_number_of_components + max_number_of_components + 1):
    model = cv2.face.EigenFaceRecognizer_create(number_of_components)  
    model.train(train_persons_faces, np.array(train_persons_labels))

    prediction = [model.predict(test_person_face)[0] for test_person_face in test_persons_faces]
    
    accuracy = accuracy_score(prediction, test_persons_labels) * 100
    print(f'Com {number_of_components} componentes principais, a acurácia é de {accuracy}%.')